// lab3.cpp : Одномерный массив с элементами типа double.	
//сравнения (> и < и ==),	унарные арифметические (--);	Быстрая по возрастанию

#include <iostream>
using namespace std;

class ar
{
private:
    double* ms;
    int len;
public:
    ar()                              //конструктор по умолчанию
    { 
        len = 0;
        ms = new double[len];
    }
    ar(int n) : len(n)                //конструктор инициализации
    {
        ms = new double[len];
        for (int i = 0; i < len; i++)
            ms[i] = 0;
    }
    ar(ar& arr)                       //конструктор копирования
    {
        len = arr.len;
        ms = new double[len];
        for (int i = 0; i < len; i++)
            ms[i] = arr.ms[i];
    }
    ~ar()                                         //деструктор
    {
        delete[] ms;
    }
    void input()                                  //ввод массива
    {
        cout << "\nEnter the number of elements in the array: " << endl;
        cin >> len;
        delete[] ms;
        ms = new double[len];
        cout << "\nEnter the elements: " << endl;
        for (int i = 0; i < len; i++)
            cin >> ms[i];
    }
    void output()                                //вывод массива
    {
        cout << "\nArray: " << endl;
        for (int i = 0; i < len; i++)
            cout << ms[i] << "     ";
    }
    void input_el()                             //ввод конкретного элемента массива
    {
        int n;
        cout << "\nEnter the number of element: " << endl;
        cin >> n;
        if (n >= 0 && n <= len)
        {
            cout << "\nEnter the element: " << endl;
            cin >> ms[n-1];
        }
        else
            cout << "\nThere is no such element\n" << endl;
    }
    void output_el()                            //вывод конкретного элемента массива
    {
        int n;
        cout << "\nEnter the number of element:\n" << endl;
        cin >> n;
        if (n >= 0 && n <= len)
        {
            cout << "\nElement: " <<ms[n-1]<< endl;
        }
        else
            cout << "\nThere is no such element\n" << endl;
    }
    bool operator< (ar m2) const                //перегрузка оператора <
    {
       int l1 = len;
       int l2 = m2.len;
       return (l1 < l2) ? true : false;
    }
    bool operator> (ar m2) const               //перегрузка оператора >
    {
        int l1 = len;
        int l2 = m2.len;
        return (l1 > l2) ? true : false;
    }
    bool operator== (ar m2) const              //перегрузка оператора ==
    {
        int l1 = len;
        int l2 = m2.len;
        return (l1 == l2) ? true : false;
    }
    friend ar& operator-- (ar&);
};
ar& operator-- (ar& arr)                      //перегрузка унарного оператора --
{
    double* new_ms = new double[arr.len];
    for (int i = 0; i < arr.len; i++)
        new_ms[i]=arr.ms[i];
    delete[] arr.ms;
    arr.len--;
    arr.ms = new double[arr.len];
    for (int i = 0; i < arr.len; i++)
        arr.ms[i] = new_ms[i];
    delete[]new_ms;
    return arr;
    int getlen() { return len; }                           //возвращает размер массива
    void quickSort(ar& arr, int left, int right)           //быстрая сортировка по возрастанию
    {
        int i = left, j = right;
        double tmp;
        double prev = arr.ms[left + (right - left) / 2];

        while (i <= j) 
        {
            while (arr.ms[i] < prev)
                i++;
            while (arr.ms[j] > prev)
                j--;
            if (i <= j) {
                tmp = arr.ms[i];
                arr.ms[i] = arr.ms[j];
                arr.ms[j] = tmp;
                i++;
                j--;
            }
        };

        if (left < j)
            quickSort(arr, left, j);
        if (i < right)
            quickSort(arr, i, right);
    }
}
int main()
{
    ar r(5), r1, r2(r);
    r.output();           //вывод массива созданого конструктором инициализации
    
    r2.input();           //
    r2.output();          //
    r2.input_el();        //
    r2.output();          //работа со статическим массивом
    r2.output_el();       //
    --r2;                 //
    r2.output();          //
    
    int k = r2.getlen();       //
    r2.quickSort(r2, 0, k-1);  //сортировка 
    r2.output();               //
    
    r1.input();                                                               //
    r1.output();                                                              //
    if (r2 < r1)                                                              //
        cout << "\n\nThe first array is smaller than the second\n" << endl;   //
    if (r2 > r1)                                                              // сравнение 2 массивов по длине
        cout << "\n\nThe first array is bigger than the second\n" << endl;    //
    if (r1 == r2)                                                             //
        cout << "\n\nArrays are the same\n" << endl;                          //
    
    ar* r3 = new ar();            //
    r3->input();                  //
    r3->output();                 //
    ar* r4 = new ar(*r3);         //работа с динамическими объектами
    r3->input_el();               //
    r3->output();                 //
    r4->output();                 //
    delete r3,r4;                 //
    
    int n;                                            //
    cout << "\nEnter the number of arrays" << endl;   //
    cin >> n;                                         //
    ar* mas = new ar[n];                              //работа с динамическим массивом объектов
    for (int i = 0; i < n; i++)                       //
        mas[i].input();                               //
    for (int i = 0; i < n; i++)                       //
        mas[i].output();                              //
    delete[]mas;                                      //
}

